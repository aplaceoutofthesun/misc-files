{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
    // }

    "header_python": {
        "prefix": "hdr",
        "body": [
            "#!/usr/bin/env python3\n#\n",
            "$0"
        ],
        "description": "Python shebang line and filename."
    },

    // "python_docstring": {
    //     "prefix": "pydocstr",
    //     "body": [
    //         "\"\"\"","$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE-$CURRENT_HOUR$CURRENT_MINUTE",
    //     "\"\"\""
    //     ],
    //     "description": "Add a triple '\"' docstring to the file."
    // },

    "blank_python_file": {
        "prefix": "namemain",
        "body": [
            "if __name__ == \"__main__\":",
            "    pass",
            "$0",
        ],
        "description": "Adds if name is main block."
    },

    "Short variable names": {
        "prefix": "let-short-names",
        "body": ["# pylint: disable=C0103", "$0"],
        "description": [
            "disable pylint's snake case complaint and allow",
            "variables such as 'n'."
        ],
    },

    "arguments": {
        "prefix": "prepargs",
        "body": [
            "from argparse import ArgumentParser",
            "\nparser = ArgumentParser()",
            "parser.add_argument('filename', action='store')",
        ],
        "description": "Get a basic argument parser arrangement."
    },

    "Basic logging": {
        "prefix": "basiclog",
        "body": ["import logging",
        "LOG_CONF = \"[+] %(asctime)s-%(levelname)s-%(message)s-[%(lineno)d]\"",
        "logging.basicConfig(format=LOG_CONF, level=logging.INFO)",
         "$0"],
        "description": "Import and set configure some basic logging."

    },

    "Disable common annoying pylint messages": {
        "prefix": "lintcommon",
        "body": [ "# pylint: disable=C0103,R0903,R0904",
        "$0"],
        "description": "Disables several pylint warnings [C0103: snake-case,R0903/4: Too few class methods."
    }
}